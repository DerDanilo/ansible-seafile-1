# master node stuff

- name: "create {{ seafile_base_dir }}"
  file: name={{ seafile_base_dir }} state=directory

- set_fact: new_conf_layout="{{ seafile_version | version_compare('5.0', operator='ge') }}"

# check if initial config already exists
- name: check for existing config
  stat: >
    path="{{ seafile_base_dir }}/{% if new_conf_layout %}conf{% else %}ccnet{% endif %}/ccnet.conf"
    get_md5=no
    get_checksum=no
  register: ccnet_config

- include_vars: dbconfig.yml

# run initial install, if config doesn't exist
- include: initial_install.yml
  when: not ccnet_config.stat.exists

# chown to seafile_user, if needed
- name: test seafile_user chown
  file: >
    path="{{ seafile_base_dir }}/ccnet"
    owner={{ seafile_user }}
    state=directory
  register: ccnet_chown
  when: seafile_user is defined
  notify:
    - Restart seafile
# chown the rest, if ccnet didn't belong to right user
- name: recursively chown seafile base dir
  shell: "chown -R {{ seafile_user }} {{ seafile_base_dir }}"
  when: ccnet_chown.changed

# create cluster avatar database (duplicate)
## to support external databases this gets done
## here, too (originally in db/tasks/main.yml)
## But it's guarded by IF NOT EXISTS
- name: Uninstall mysql-client, if there (conflict with mariadb-client)
  apt: name=mysql-client state=absent
- name: Install mariadb-client for db import
  apt: name=mariadb-client state=present

- copy: src=avatar_uploaded.sql dest=/tmp
- name: "seahub-db: creating avatar_uploaded table (if not exists)"
  mysql_db: >
    name={{ db_seahub }}
    state=import
    target=/tmp/avatar_uploaded.sql
    login_host={{ db_server }}
    login_port={{ db_port }}
    login_user={{ db_user }}
    login_password={{ db_pw }}

- name: remove unnecessary java dependency check
  lineinfile: >
    dest="{{ seafile_base_dir }}/seafile-server-latest/seafile.sh"
    regexp="^\s*test_java;"
    state=absent

- name: apply seafdav logrotate patch
  patch: >
    dest={{ seafile_base_dir }}/seafile-server-latest/seahub/thirdpart/wsgidav/util.py
    src=seafdav_logrotate.patch
  when: use_logrotate

- name: apply shibboleth guest role mapping code
  patch: >
    dest={{ seafile_base_dir }}/seafile-server-latest/seahub/thirdpart/shibboleth/backends.py
    src=shib_guest.patch
  when: shibboleth_guests

- name: "Support current python-rados (i.e. Ubuntu 16.04)"
  patch: >
    dest={{ seafile_base_dir }}/seafile-server-latest/seahub/thirdpart/seafobj/backends/ceph.py
    src=seafobj_ceph_jewel_xenial.patch
  when: ansible_distribution == 'Ubuntu' and ( ansible_distribution_version | version_compare('16', operator='ge') )

- name: gather ccnet ID
  shell: "fgrep 'ID =' {{ seafile_base_dir }}/{% if new_conf_layout %}conf{% else %}ccnet{% endif %}/ccnet.conf | cut -d= -f 2 | xargs echo"
  register: ccnet_id_cmd

- name: copy seafile license
  copy: src=seafile-license.txt dest={{ seafile_base_dir }}/
  notify:
    - Restart seafile

- name: gather seahub SECRET_KEY
  shell: "fgrep SECRET_KEY {{ seafile_base_dir }}{% if new_conf_layout %}/conf{% endif %}/seahub_settings.py | cut -d\\\" -f 2 | xargs echo"
  register: seahub_secret_cmd

- set_fact: ccnet_id="{{ ccnet_id_cmd.stdout }}" seahub_secret="{{ seahub_secret_cmd.stdout }}"

- name: configure ccnet.conf
  template: src=ccnet.conf.j2 dest="{{ seafile_base_dir }}/{% if new_conf_layout %}conf{% else %}ccnet{% endif %}/ccnet.conf"
  notify:
    - Restart seafile

- name: configure seahub_settings.py
  template: src=seahub_settings.py.j2 dest="{{ seafile_base_dir }}/{% if new_conf_layout %}conf/{% endif %}seahub_settings.py"
  notify:
    - Restart seafile

- name: configure seafile.conf
  template: src=seafile.conf.j2 dest={{ seafile_base_dir }}/{% if new_conf_layout %}conf{% else %}seafile-data{% endif %}/seafile.conf
  notify:
    - Restart seafile

- name: copy seafdav.conf (default settings)
  copy: src=seafdav.conf dest={{ seafile_base_dir }}/conf/

- name: configure seafevents.conf
  template: src=seafevents.conf.j2 dest={{ seafile_base_dir }}/{% if new_conf_layout %}conf{% else %}pro-data{% endif %}/seafevents.conf
  notify:
    - Restart seafile

# Customization
- name: make sure customization folder exists
  file: path={{ seafile_base_dir }}/seahub-data/custom state=directory
- name: make sure customization symlink exists
  file: path={{ seafile_base_dir }}/seafile-server-latest/seahub/media/custom src=../../../seahub-data/custom state=link
- name: copy seahub customizations
  copy: src=seahub-custom/ dest={{ seafile_base_dir }}/seahub-data/custom/
  notify:
    - Restart seafile
- name: make sure template folder exists
  file: path="{{ seafile_base_dir }}/seahub-data/custom/templates" state=directory
- name: copy seahub templates
  copy: src=seahub-templates/ dest={{ seafile_base_dir }}/seahub-data/custom/templates
  notify:
    - Restart seafile

# install maintenance scripts
- name: make sure script folder exists
  file: path={{ seafile_base_dir }}/scripts state=directory
- name: copy scripts
  copy: src=scripts/ dest={{ seafile_base_dir }}/scripts/ owner=root mode="go-w"

# ldap workaround, see #940
- name: ldap workaround
  file: >
    name="{{ seafile_base_dir }}/seafile-server-latest/seafile/lib/{{ item }}"
    state=absent
  with_items:
    - liblber-2.4.so.2
    - libldap-2.4.so.2
    - libsasl2.so.2
  when: ldap_lib_fix

# fix ceph libs, see #1720
- name: ceph workaround
  file: >
    name="{{ seafile_base_dir }}/seafile-server-latest/seafile/lib/{{ item }}"
    state=absent
  with_items:
    - librados.so.2
    - libstdc++.so.6
    - libnspr4.so
  when: rados_lib_fix

# create admin after install
# needed for init scripts to work
- name: Create log directory
  file: >
    path="{{ seafile_base_dir }}/logs"
    owner="{{ seafile_user|default('root') }}"
    state=directory

#- service: name=seafile-server state=started
#  ignore_errors: yes  # seahub.sh not starting?
- command: "sudo -u {{ seafile_user|default('root') }} {{ seafile_base_dir }}/seafile-server-latest/seafile.sh start"
  when: not ccnet_config.stat.exists

- include_vars: admin.yml
- name: create admin user, if there is none
  seafile_admin_init: >
    path="{{ seafile_base_dir }}"
    subdir="seafile-pro-server-{{ seafile_version }}"
    name="{{ seafile_admin_user }}"
    password="{{ seafile_admin_pw }}"
  when: not ccnet_config.stat.exists

- command: "sudo -u {{ seafile_user|default('root') }} {{ seafile_base_dir }}/seafile-server-latest/seafile.sh stop"
  when: not ccnet_config.stat.exists

- name: make sure ssh-agent works via sudo
  lineinfile: >
    dest=/etc/sudoers
    state=present
    insertafter='^Defaults.*env_reset'
    line='Defaults\tenv_keep+=SSH_AUTH_SOCK'
    validate='visudo -cf %s'
